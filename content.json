[{"title":"vue-cli小结","date":"2017-03-31T03:18:31.000Z","path":"2017/03/31/vue-cli小结/","text":"如何利用官方的脚手架工具构建vue项目 首先要安装node.js 利用nodejs里面的安装包管理工具npm 安装脚手架工具vue-cli 123456789$ npm install -g vue-cli //全局安装vue-cli$ vue init webpack projectName //生成projectName为项目名的模板,这个名字可以自己写$ cd projectName$ npm install //初始化安装npm$ 以上方法就可以在电脑上看到为projectName名字的文件夹4.运行这个项目 1$ npm run dev //运行vue项目 以上步骤在浏览器中输入：http://localhost:8080 //就可以访问首页了想要在服务器上面运行1$ npm run bulid 以上内容参考： http://www.qdfuns.com/notes/15904/fbb4d15b9c22fd373b605805bde8fd44.html","tags":[{"name":"vue","slug":"vue","permalink":"https://xiaqijian.github.io/tags/vue/"}]},{"title":"vue-router使用","date":"2017-03-29T05:38:55.000Z","path":"2017/03/29/vue-router使用/","text":"肯定里面要有这个模块，然后引入，使用12import Router from &apos;vue-router&apos;Vue.use(Router) 然后再开始使用 引入组件利用import 12import heard from &apos;./components/heard&apos;import foot from &apos;./components/foot&apos; 注册router 1234const routes = [ &#123; path: &apos;/heard&apos;, component: heard &#125;, &#123; path: &apos;/foot&apos;, component: foot &#125;] 创建vue-router实例 123const router = new VueRouter(&#123; routes&#125;) 使用 123456&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, router&#125;)&lt;/script&gt; 123456&lt;div id=&quot;app&quot;&gt; &lt;router-link to=&quot;/heard&quot;&gt; 我是头部 &lt;/router-link&gt; &lt;router-link to=&quot;/foot&quot;&gt; 我是尾部 &lt;/router-link&gt; &lt;!-- 渲染内容 --&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;","tags":[{"name":"vue","slug":"vue","permalink":"https://xiaqijian.github.io/tags/vue/"}]},{"title":"vue-component使用","date":"2017-03-29T05:38:13.000Z","path":"2017/03/29/vue-component使用/","text":"在component里面有多种情况，其实很多情况下都是从别的组件导入此组件 导入组件本组件写 123&lt;script&gt;const heard = &#123; template: &apos;&lt;div&gt;this is heardComponent&lt;/div&gt;&apos; &#125;&lt;/script&gt; 导入组件 123&lt;script&gt;import heard from &apos;./components/heard.vue&apos;&lt;/script&gt; 注册component全局注册组件 123456&lt;script&gt;import Vue from &apos;vue&apos;Vue.component (&apos;heard&apos;,&#123; template: heard&#125;)&lt;/script&gt; 局部注册component12345678&lt;script&gt;new Vue (&#123; el:&apos;#app&apos;, components: &#123; &apos;heard&apos;: heard &#125;&#125;)&lt;/script&gt; 使用component1234// xxx.vue 文件里面使用&lt;div id=&quot;app&quot;&gt; &lt;heard&gt;&lt;/heard&lt;/div&gt;","tags":[{"name":"vue","slug":"vue","permalink":"https://xiaqijian.github.io/tags/vue/"}]},{"title":"gulp总结","date":"2017-03-29T04:30:14.000Z","path":"2017/03/29/gulp总结/","text":"如何使用首先下载安装gulp1$ npm i gulp -g 在本地建一个文件夹gulp_study123$ mkdir gulp_study$ cd gulp_study 开始工作建立配置文件，并安装本地gulp依赖123$ npm init$ npm install gulp --save-dev 在gulp_study文件夹建立相关文件夹 文件结构为1234567891011121314151617gulp_study | | |--dist // 生成文件 | |--src //源码放的位置 | | | |--------js | |---------css | |-----img | |-----less | |-----index.html | |--gulpfile.js | |--package.json | gulp处理文件分类 html css js img 主要用到以下插件gulp-uglify js文件压缩gulp-rename 重命名gulp-minify-css css压缩gulp-less 编译lessgulp-autoprefixer 自动添加浏览器前缀gulp-imagemin image 压缩gulp.spritesmith img 雪碧图gulp-minify-html html 压缩gulp-concat 文件合并gulp-babel 将es6编译成es5gulp-sourcemapshtml [source]html 主要还是进行代码压缩处理1234567var gulp = require(&apos;gulp&apos;)var minifyHtml = require(&apos;gulp-minify-html&apos;) // html压缩gulp.task(&apos;minifyhtml&apos;, function()&#123; gulp.src(&apos;src/index.html&apos;) .pipe(minifyHtml()) .pipe(gulp.dest(&apos;dist&apos;))&#125;); index.html123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;首页&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./css/style.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;./js/hello.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; 运行 1$ gulp minifyhtml 之后就可以在dist文件夹下面看到压缩好的index.html css [source]加载所需插件1234var gulp = require(&apos;gulp&apos;);var rename = require(&apos;gulp-rename&apos;); // 重命名var minifyCss = require(&apos;gulp-minify-css&apos;); // css压缩var autoprefixer = require(&apos;gulp-autoprefixer&apos;) // 自动添加浏览器前缀 css代码压缩处理123456// css 压缩gulp.task(&apos;minifycss&apos;, function()&#123; gulp.src(&apos;src/css/*.css&apos;) .pipe(minifyCss()) .pipe(gulp.dest(&apos;dist/css&apos;))&#125;); css 添加浏览器前缀 123456789101112// 自动添加浏览器前缀gulp.task(&apos;autoprefixer&apos;, function()&#123; gulp.src(&apos;src/css/*.css&apos;) .pipe(autoprefixer(&#123; browsers: [&apos;last 2 versions&apos;, &apos;Android &gt;= 4.0&apos;], cascade: true, //是否美化属性值 默认：true 像这样： //-webkit-transform: rotate(45deg); // transform: rotate(45deg); remove:true //是否去掉不必要的前缀 默认：true &#125;)) .pipe(gulp.dest(&apos;dist/css&apos;))&#125;); css 重新命名 123456// css 重名gulp.task(&apos;renamecss&apos;, function()&#123; gulp.src(&apos;src/css/style.css&apos;) .pipe(rename(&apos;style.min.css&apos;)) .pipe(gulp.dest(&apos;dist/css&apos;))&#125;); js [source]js主要经行压缩，重命名, 合并文件, ES6 转换ES5 加载插件12345var gulp = require(&apos;gulp&apos;);var uglify = require(&apos;gulp-uglify&apos;); // js文件压缩var rename = require(&apos;gulp-rename&apos;); // 重命名var concat = require(&apos;gulp-concat&apos;); // 文件合并var babel = require(&apos;gulp-babel&apos;); // ES6编译成ES5 压缩 123456// js文件压缩gulp.task(&apos;uglify&apos;, function()&#123; gulp.src(&apos;src/js/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;dist/js&apos;))&#125;); 合并文件，重命名 1234567891011121314// 重命名gulp.task(&apos;rename&apos;, function()&#123; gulp.src(&apos;src/js/hello.js&apos;) .pipe(rename(&apos;hello.min.js&apos;)) .pipe(gulp.dest(&apos;dist/js&apos;))&#125;)// 文件合并gulp.task(&apos;concat&apos;, function()&#123; gulp.src(&apos;src/js/*.js&apos;) .pipe(concat(&apos;concat.js&apos;)) .pipe(uglify()) // 合并之后压缩 .pipe(gulp.dest(&apos;dist/js&apos;))&#125;); 将ES6转换为ES5 12345678// 再使用gulp-babel 之前需安装一下内容// npm install gulp-babel babel-preset-2015 --save-dev// 将ES6转换成ES5gulp.task(&apos;es6&apos;, function()&#123; gulp.src(&apos;src/js/es6.js&apos;) .pipe(babel()) .pipe(gulp.dest(&apos;dist/js&apos;))&#125;); img [source] –关于图片处理主要经行压缩，制作雪碧图 加载插件 123var gulp = require(&apos;gulp&apos;);var imagemin = require(&apos;gulp-imagemin&apos;); // image 压缩var imgspriter = require(&apos;gulp.spritesmith&apos;) // img 雪碧图 图片压缩 123456// image压缩gulp.task(&apos;imagemin&apos;, function()&#123; gulp.src(&apos;src/img/*.&#123;png,jpg,gif,ico&#125;&apos;) .pipe(imagemin()) .pipe(gulp.dest(&apos;dist/img&apos;))&#125;); 雪碧图 1234567891011// image 雪碧图gulp.task(&apos;imgspriter&apos;, function()&#123; gulp.src(&apos;src/icon/*.png&apos;) .pipe(imgspriter(&#123; imgName:&apos;sprite.png&apos;, cssName:&apos;css/icon.css&apos;, padding:5, algorithm:&apos;binary-tree&apos; &#125;)) .pipe(gulp.dest(&apos;dist/spriter&apos;))&#125;)","tags":[{"name":"gulp","slug":"gulp","permalink":"https://xiaqijian.github.io/tags/gulp/"}]},{"title":"blog","date":"2017-03-29T03:33:30.044Z","path":"2017/03/29/hello-world/","text":"资源网站 https://hexo.io/zh-cn/ blog主题 https://github.com/litten/hexo-theme-yilia 安装hexo1$ npm i hexo -g 初始化文件夹创建一个文件夹blog，在文件夹内执行 1$ hexo init 生成静态页面blog文件夹下1$ hexo generate （hexo g 也可以） 本地访问1$ hexo server 打开：http://localhost:4000 配置GitHub 配置GitHub 在_config.yml 文件后面添加 1234deploy: type: git repository: https://github.com/leopardpan/leopardpan.github.io.git branch: master 安装插件 1$ npm install hexo-deployer-git --save 执行 1$ hexo deploy 每次添加文章之后，执行下面三个步骤 123hexo cleanhexo generatehexo deploy 一些常用的命令 1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 参考文件利用hexo搭建博客","tags":[]}]