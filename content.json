[{"title":"gulp总结","date":"2017-03-29T04:30:14.000Z","path":"2017/03/29/gulp总结/","text":"如何使用首先下载安装gulp1$ npm i gulp -g 在本地建一个文件夹gulp_study123$ mkdir gulp_study$ cd gulp_study 开始工作建立配置文件，并安装本地gulp依赖123$ npm init$ npm install gulp --save-dev 在gulp_study文件夹建立相关文件夹 文件结构为1234567891011121314151617gulp_study | | |--dist // 生成文件 | |--src //源码放的位置 | | | |--------js | |---------css | |-----img | |-----less | |-----index.html | |--gulpfile.js | |--package.json | gulp处理文件分类 html css js img 主要用到以下插件gulp-uglify js文件压缩gulp-rename 重命名gulp-minify-css css压缩gulp-less 编译lessgulp-autoprefixer 自动添加浏览器前缀gulp-imagemin image 压缩gulp.spritesmith img 雪碧图gulp-minify-html html 压缩gulp-concat 文件合并gulp-babel 将es6编译成es5gulp-sourcemapshtml [source]html 主要还是进行代码压缩处理1234567var gulp = require(&apos;gulp&apos;)var minifyHtml = require(&apos;gulp-minify-html&apos;) // html压缩gulp.task(&apos;minifyhtml&apos;, function()&#123; gulp.src(&apos;src/index.html&apos;) .pipe(minifyHtml()) .pipe(gulp.dest(&apos;dist&apos;))&#125;); index.html123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;首页&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./css/style.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;./js/hello.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; 运行1$ gulp minifyhtml 之后就可以在dist文件夹下面看到压缩好的index.html css [source]加载所需插件1234var gulp = require(&apos;gulp&apos;);var rename = require(&apos;gulp-rename&apos;); // 重命名var minifyCss = require(&apos;gulp-minify-css&apos;); // css压缩var autoprefixer = require(&apos;gulp-autoprefixer&apos;) // 自动添加浏览器前缀 css代码压缩处理123456// css 压缩gulp.task(&apos;minifycss&apos;, function()&#123; gulp.src(&apos;src/css/*.css&apos;) .pipe(minifyCss()) .pipe(gulp.dest(&apos;dist/css&apos;))&#125;); css 添加浏览器前缀123456789101112// 自动添加浏览器前缀gulp.task(&apos;autoprefixer&apos;, function()&#123; gulp.src(&apos;src/css/*.css&apos;) .pipe(autoprefixer(&#123; browsers: [&apos;last 2 versions&apos;, &apos;Android &gt;= 4.0&apos;], cascade: true, //是否美化属性值 默认：true 像这样： //-webkit-transform: rotate(45deg); // transform: rotate(45deg); remove:true //是否去掉不必要的前缀 默认：true &#125;)) .pipe(gulp.dest(&apos;dist/css&apos;))&#125;); css 重新命名123456// css 重名gulp.task(&apos;renamecss&apos;, function()&#123; gulp.src(&apos;src/css/style.css&apos;) .pipe(rename(&apos;style.min.css&apos;)) .pipe(gulp.dest(&apos;dist/css&apos;))&#125;); js [source]js主要经行压缩，重命名, 合并文件, ES6 转换ES5 加载插件12345var gulp = require(&apos;gulp&apos;);var uglify = require(&apos;gulp-uglify&apos;); // js文件压缩var rename = require(&apos;gulp-rename&apos;); // 重命名var concat = require(&apos;gulp-concat&apos;); // 文件合并var babel = require(&apos;gulp-babel&apos;); // ES6编译成ES5 压缩123456// js文件压缩gulp.task(&apos;uglify&apos;, function()&#123; gulp.src(&apos;src/js/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;dist/js&apos;))&#125;); 合并文件，重命名1234567891011121314// 重命名gulp.task(&apos;rename&apos;, function()&#123; gulp.src(&apos;src/js/hello.js&apos;) .pipe(rename(&apos;hello.min.js&apos;)) .pipe(gulp.dest(&apos;dist/js&apos;))&#125;)// 文件合并gulp.task(&apos;concat&apos;, function()&#123; gulp.src(&apos;src/js/*.js&apos;) .pipe(concat(&apos;concat.js&apos;)) .pipe(uglify()) // 合并之后压缩 .pipe(gulp.dest(&apos;dist/js&apos;))&#125;); 将ES6转换为ES512345678// 再使用gulp-babel 之前需安装一下内容// npm install gulp-babel babel-preset-2015 --save-dev// 将ES6转换成ES5gulp.task(&apos;es6&apos;, function()&#123; gulp.src(&apos;src/js/es6.js&apos;) .pipe(babel()) .pipe(gulp.dest(&apos;dist/js&apos;))&#125;); img [source]关于图片处理主要经行压缩，制作雪碧图 加载插件123var gulp = require(&apos;gulp&apos;);var imagemin = require(&apos;gulp-imagemin&apos;); // image 压缩var imgspriter = require(&apos;gulp.spritesmith&apos;) // img 雪碧图 图片压缩123456// image压缩gulp.task(&apos;imagemin&apos;, function()&#123; gulp.src(&apos;src/img/*.&#123;png,jpg,gif,ico&#125;&apos;) .pipe(imagemin()) .pipe(gulp.dest(&apos;dist/img&apos;))&#125;); 雪碧图1234567891011// image 雪碧图gulp.task(&apos;imgspriter&apos;, function()&#123; gulp.src(&apos;src/icon/*.png&apos;) .pipe(imgspriter(&#123; imgName:&apos;sprite.png&apos;, cssName:&apos;css/icon.css&apos;, padding:5, algorithm:&apos;binary-tree&apos; &#125;)) .pipe(gulp.dest(&apos;dist/spriter&apos;))&#125;)","tags":[{"name":"gulp  构建工具","slug":"gulp-构建工具","permalink":"https://xiaqijian.github.io/tags/gulp-构建工具/"}]},{"title":"Hello World","date":"2017-03-29T03:33:30.044Z","path":"2017/03/29/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]